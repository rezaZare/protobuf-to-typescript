"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateToProto = void 0;
function generateToProto() {
    return "\n\nexport interface InterfaceT<T> {\n  new (): T;\n}\n\nexport interface Config {\n  [key: string]: InterfaceT<never>;\n}\n\nconst setName = (key: string, isList?: boolean): string => {\n  if (!key) {\n    return key;\n  }\n  return `set${key.slice(0, 1).toUpperCase()}${key.slice(1)}`;\n};\n\nconst isList = (obj: any): boolean => {\n  return typeof obj === \"object\" && obj instanceof Array;\n};\n\nexport const toProto = <T, K extends { [key: string]: any }>(\n  GenericClass: InterfaceT<T>,\n  data: K,\n  config: Config = {}\n): T => {\n  const result: T = new GenericClass();\n  for (const key in data) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (data.hasOwnProperty(key)) {\n      const list = isList(data[key]);\n      if (typeof data[key] === \"object\" && !list) {\n        // if (typeof config[key] === 'undefined') {\n        //   continue;\n        // }\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        ((result as any)[setName(key, list)] as Function)(toProto(config[key] as InterfaceT<any>, config, data[key]));\n      } else {\n        if (list && typeof data[key][0] === \"object\" && config[key]) {\n          const arr = [];\n          for (const i in data[key]) {\n            arr.push(toProto(config[key], config, data[key][i]));\n          }\n          // eslint-disable-next-line @typescript-eslint/ban-types\n          ((result as any)[setName(key, list)] as Function)(arr);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        ((result as any)[setName(key, list)] as Function)(data[key]);\n      }\n    }\n  }\n\n  return result;\n};\n";
}
exports.generateToProto = generateToProto;
//# sourceMappingURL=generateToProto.js.map