syntax = "proto3";

package movie.v1.cmd;

import "common/types_common_v1.proto";

import "google/protobuf/empty.proto";

option go_package = "api/pb/v1/cmdpb";

service FestivalApi {
    // Festival
    rpc CreateFestival(CreateFestivalRequest) returns (CreateFestivalResponse);
    rpc UpdateFestival(UpdateFestivalRequest) returns (google.protobuf.Empty);
    rpc DeleteFestival(DeleteFestivalRequest) returns (google.protobuf.Empty);

    // FestivalEvent
    rpc CreateFestivalEvent(CreateFestivalEventRequest) returns (CreateFestivalEventResponse);
    rpc UpdateFestivalEvent(UpdateFestivalEventRequest) returns (google.protobuf.Empty);
    rpc DeleteFestivalEvent(DeleteFestivalEventRequest) returns (google.protobuf.Empty);

    // FestivalEvent Participation
    rpc CreateFestivalEventParticipation(CreateFestivalEventParticipationRequest) returns (CreateFestivalEventParticipationResponse);
    rpc DeleteFestivalEventParticipation(DeleteFestivalEventParticipationRequest) returns (google.protobuf.Empty);

    // Movie festival awards
    rpc CreateMovieFestivalEventAward(CreateMovieFestivalEventAwardRequest) returns (CreateMovieFestivalEventAwardResponse);
    rpc UpdateMovieFestivalEventAward(UpdateMovieFestivalEventAwardRequest) returns (google.protobuf.Empty);
    rpc DeleteMovieFestivalEventAward(DeleteMovieFestivalEventAwardRequest) returns (google.protobuf.Empty);

    // Cast festival awards
    rpc CreateCastFestivalEventAward(CreateCastFestivalEventAwardRequest) returns (CreateCastFestivalEventAwardResponse);
    rpc UpdateCastFestivalEventAward(UpdateCastFestivalEventAwardRequest) returns (google.protobuf.Empty);
    rpc DeleteCastFestivalEventAward(DeleteCastFestivalEventAwardRequest) returns (google.protobuf.Empty);

    // Movie award state
    rpc CreateMovieAwardState(CreateMovieAwardStateRequest) returns (CreateMovieAwardStateResponse);
    rpc UpdateMovieAwardState(UpdateMovieAwardStateRequest) returns (google.protobuf.Empty);
    rpc DeleteMovieAwardState(DeleteMovieAwardStateRequest) returns (google.protobuf.Empty);

    // Cast award state
    rpc CreateCastAwardState(CreateCastAwardStateRequest) returns (CreateCastAwardStateResponse);
    rpc UpdateCastAwardState(UpdateCastAwardStateRequest) returns (google.protobuf.Empty);
    rpc DeleteCastAwardState(DeleteCastAwardStateRequest) returns (google.protobuf.Empty);

    // Directly give a movie award, nominated it, participated it or remove it from the movie by state. This rpc might be deprecate in near future.
    rpc SetMovieAwardState(SetMovieAwardStateRequest) returns (google.protobuf.Empty);

    // Directly give a cast award, nominated it, win it or remove it state. This rpc might be deprecate in near future.
    rpc SetCastAwardState(SetCastAwardStateRequest) returns (google.protobuf.Empty);
}

// SetCastAwardState
message SetCastAwardStateRequest {
    int64 cast_id=1;
    common.CastAwardStates  state =2; // NOMINATED , WON , RENOUNCED
    int64 cast_festival_event_award_id =3;
}

// SetMovieAwardState
message SetMovieAwardStateRequest {
    int64 movie_id=1;
    common.MovieAwardStates  state =2; // NOMINATED , WON , PARTICIPATED , NONE
    int64 movie_festival_event_award_id =3;
}

// Cast award state
message CreateCastAwardStateRequest {
    common.CastAwardState state=1;
}

message CreateCastAwardStateResponse {
    int64 cast_award_state_id=1;
}

message UpdateCastAwardStateRequest {
    int64 cast_award_state_id=1;
    common.FestivalAwardStates  state =2; // NOMINATED , WON
}

message DeleteCastAwardStateRequest{
    int64 cast_award_state_id=1;
}

// Movie award state
message CreateMovieAwardStateRequest {
    common.MovieAwardState  state =1;
}

message CreateMovieAwardStateResponse {
    int64 movie_award_state_id=1;
}

message UpdateMovieAwardStateRequest {
    int64 movie_award_state_id=1;
    common.FestivalAwardStates  state =2; // NOMINATED , WON
}

message DeleteMovieAwardStateRequest{
    int64 movie_award_state_id=1;
}

// Movie Award
message CreateMovieFestivalEventAwardRequest {
    common.Award  award = 1;
}
message CreateMovieFestivalEventAwardResponse {
    int64 movie_festival_event_award_id = 1;
}
message UpdateMovieFestivalEventAwardRequest {
    common.Award  award = 1;
}
message DeleteMovieFestivalEventAwardRequest {
    int64 movie_festival_event_award_id = 1;
}
 
// Cast Award
message CreateCastFestivalEventAwardRequest {
    common.Award  award = 1;
}
message CreateCastFestivalEventAwardResponse {
    int64 cast_festival_event_award_id = 1;
}
message UpdateCastFestivalEventAwardRequest {
    common.Award  award = 1;
}
message DeleteCastFestivalEventAwardRequest {
    int64 cast_festival_event_award_id = 1;
}

// FestivalEvent
message CreateFestivalEventRequest {
    common.FestivalEvent event=1;
}

message CreateFestivalEventResponse {
    int64 festival_event_id = 1;
}

// Note that festival_id cannot be updated and has been removed on purpose.
message UpdateFestivalEventRequest {
   common.FestivalEvent event=1;
}

message DeleteFestivalEventRequest {
    int64 festival_event_id = 1;
}
 
message CreateFestivalEventParticipationRequest {
    int64 festival_event_id = 1;
    int64 movie_id = 2;
}

message CreateFestivalEventParticipationResponse {
    int64 festival_event_participation_id = 1;
}

message DeleteFestivalEventParticipationRequest {
    int64 festival_event_participation_id = 1;
}
 
// Festival
message CreateFestivalRequest {
    common.Festival festival=1;
}

message CreateFestivalResponse {
    int64 festival_id = 1;
}

// Note that festival_id cannot be updated and has been removed on purpose.
message UpdateFestivalRequest {
   common.Festival festival=1;
}

message DeleteFestivalRequest {
    int64 festival_id = 1;
}