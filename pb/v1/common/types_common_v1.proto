syntax = "proto3";

package movie.v1.common;

option go_package = "api/pb/v1/commonpb";

enum ContentTypes {
    CONTENT_TYPES_UNKNOWN = 0;
    CONTENT_TYPES_MOVIE       = 1;
    CONTENT_TYPES_TRAILER     = 2;
    CONTENT_TYPES_SUMMARY     = 3;
}

message MultiLingualString {
    string en = 1;
    string fa = 2;
    string ar = 3;
    string other_language_value = 4; // might not be used everywhere
    string other_language_country = 5;  // might not be used everywhere
}

///////////////
message PaginationRequest {
    int64 page_number = 1;
    int64 page_size   = 2;
}

message PaginationResponse {
    int64 page_number = 1;
    int64 page_size   = 2;
    int64 total_hits  = 3;
}
 
message OffsetPaginationRequest {
    int64 page = 1;
    int64 size   = 2;
}

// Used for default query parameter searching over models
message QueryOffsetPaginationRequest {
    int64 page = 1;
    int64 size   = 2;
    string query =3;
}

enum MetaContentTypes {
    META_CONTENT_TYPES_UNKNOWN = 0;
    META_CONTENT_TYPES_URL       = 1;
    META_CONTENT_TYPES_TEXT  = 2;
    META_CONTENT_TYPES_IMAGES     = 3;
    META_CONTENT_TYPES_PARTS     = 4;
    META_CONTENT_TYPES_END_SCREEN     = 5;

}

enum FestivalAwardStates {
   FESTIVAL_AWARD_STATES_UNKNOWN = 0;
   FESTIVAL_AWARD_STATES_NOMINATED= 1;
   FESTIVAL_AWARD_STATES_WON = 2;
}

enum MovieAwardStates {
    MOVIE_AWARD_STATES_UNKNOWN = 0;
    MOVIE_AWARD_STATES_NOMINATED= 1; // A movie will participate in a festival (if required) and will be nominated for an award.
    MOVIE_AWARD_STATES_WON = 2; // A movie will participate in a festival (if required) and will won an award.
    MOVIE_AWARD_STATES_PARTICIPATED = 3;  // A movie will participate in a festival and any given award state will be removed.
    MOVIE_AWARD_STATES_NONE= 4;  // Movie participation will be removed ( if existed ) and any given award state (movie or cast) will also be removed
    MOVIE_AWARD_STATES_RENOUNCED= 5;  // The award which is given to the movie, will be removed. participation will only be removed if no other awards (nominated or won)/(movies or casts) is given to the movie
 }
 

 enum CastAwardStates {
    CAST_AWARD_STATES_UNKNOWN = 0;
    CAST_AWARD_STATES_NOMINATED= 1; // The cast will participate in the festival (if required) and the given cast will won an award.
    CAST_AWARD_STATES_WON = 2; // The movie will participate in a festival (if required) and the given cast will won an award.
    CAST_AWARD_STATES_RENOUNCED= 3;  // The award which is given to the cast, will be removed. participation will only be removed if no other awards (nominated or won)/(Movies or Casts) is given to the movie related to the cast
 }
 
message FestivalEvent {
        optional int64 festival_event_id = 1; // Note that this id might be empty depending on usage
        int64 statue_image_id=3;
        repeated int64 red_carpet_image_ids=4;
        optional string country =5;
        optional string city =6;
        optional int64 start_date          = 7;
        optional int64 end_date          = 8;
        bool is_last=9;
        int32 event_number=10;
        common.MultiLingualString host=11;
        int64 festival_id=12;
}


message FestivalEventDetail {
    FestivalEvent event =1;
    repeated common.Award movie_festival_event_awards=2;
    repeated common.Award cast_festival_event_awards=3;
}

message Festival {
    optional int64 festival_id = 1; // Note that this id might be empty depending on usage
    common.MultiLingualString name=2;
    common.MultiLingualString focus=3;
    common.MultiLingualString description=4;
}


message FestivalDetail {
    repeated FestivalEventDetail events=5;
    Festival festival=6;
}

message Award {
    optional int64 id =1;
    common.MultiLingualString title =2;
    int64 image_id=3;
    int64  festival_event_id = 4;
}


message  MovieAwardState {
    optional int64 movie_award_state_id =1;
    int64 movie_festival_event_award_id =2; 
    common.FestivalAwardStates state=3;
    int64 festival_event_participation_id=4;

}

message  MovieAwardStateDetail {
    MovieAwardState state=1;
    Award movie_festival_event_award=2;
}

message CastAwardState {
    optional int64 cast_award_state_id =1;
    int64 cast_festival_event_award_id =2; 
    int64 cast_id=3;
    common.FestivalAwardStates state=4;
}

message CastAwardStateDetail {
    CastAwardState state=1;
    CastDetail cast=2;
    Award cast_festival_event_award=3;
}

message Person {
    optional int64 person_id = 1;
    common.MultiLingualString full_name = 2;
    common.MultiLingualString  nick_name =3;
    optional string country =4; // birthplace, option value
    optional string city =5; // birthplace , option value
    optional string  current_country  =6;  
    optional string  current_city =7;
    optional int64 birth_date = 8;
    optional int64 first_carrier_date = 9;
    common.MultiLingualString biography = 10;
    map<string, string> social_media = 11;
    int64 avatar_id = 12;
    repeated int64 image_ids = 13;
}

message CastType {
    optional int64 cast_type_id = 1;
    common.MultiLingualString title = 2;
    bool can_have_role =3;
}

message CastDetail {
    Cast cast=1;
    Person person = 2;
    CastType cast_type = 3;
}

message FestivalEventParticipation{
    int64 festival_event_participation_id=1;
    FestivalEvent festival_event=2;
}

message FestivalEventParticipationDetail{
    FestivalEventParticipation event=1;
    repeated MovieAwardStateDetail movie_award_states=3;
    repeated CastAwardStateDetail cast_award_states=4;
    Festival festival=5;
}

enum MovieState {
    MOVIE_STATE_UNKNOWN  = 0;
    MOVIE_STATE_DRAFT          = 1; // In Editing, initial movie state , not in query
    MOVIE_STATE_INSPECTING     = 2; // Inspecting, not in query
    MOVIE_STATE_APPROVED       = 3; // Approved, will be in query
    MOVIE_STATE_REJECTED       = 4; // Rejected,not in query
    MOVIE_STATE_DELETED       = 5; // Deleted ,not in query
}

message Series {
    optional int64 series_id                            = 1;
    common.MultiLingualString title                     = 2;
    optional int64 schedule_cast_id                     = 3;
    optional int64 schedule_cast_at = 4;
    int64 movie_type_id = 5;
}

message Movie {

    message Series {
        int64 season_id      = 1;
        int32 episode_no     = 2;
        bool is_last_episode = 3;
        int64 movie_type_id  = 4;
    }

    message Franchise {
        int64 franchise_id = 1;
    }

    int64 movie_id      = 1;
    optional int64 movie_type_id = 2;

    oneof specific {
        Series series       = 3;
        Franchise franchise = 4;
    }

    common.MultiLingualString title = 5;
    bool is_coming_soon             = 6;
    int64 release_at          = 8;
    repeated int64 genre_ids                            = 11;
    optional common.MultiLingualString plot               = 12;
    optional string production_country                   = 13;
    optional string filming_location                      = 15;
    optional int64 production_start_date = 16;
    optional int64 production_end_date = 17;
    optional int64 visible_at = 18;
    optional int64 available_at = 19;
    repeated int64 age_group_ids = 20; 
    optional common.MovieState state = 21; 
    optional string state_change_reason = 22; 
    bool is_play_free             = 23;
    bool is_download_free         = 24;
    common.MultiLingualString criticism             = 25;
    double imdb         = 26;
    
}

message Franchise {
    optional int64 franchise_id                        = 1;
    common.MultiLingualString title = 2;
}

message Id{
    int64 value = 1;
}

enum CommentState {
    COMMENT_STATE_UNKNOWN = 0;
    COMMENT_STATE_DRAFT       = 1;
    COMMENT_STATE_ACTIVE     = 2;
}

message Genre {
    optional int64 genre_id                  = 1;
    common.MultiLingualString title = 2;
}

message AgeGroup {
    optional int64 age_group_id = 1;
    int32 from = 2;
    int32 to = 3;
}

message LikeDetails {
    int64 like_cnt = 1; 
    int64 dislike_cnt = 2; 
    optional bool liked = 3;
}

message PlaylistDetails {
    bool favorite = 1;
    bool watchlater = 2;
    bool playlist = 3;
   repeated int64 playlist_ids = 4;
}

enum PlaylistRefType {
    PLAYLIST_REF_TYPE_UNKNOWN = 0;
    PLAYLIST_REF_TYPE_MOVIE = 1;
    PLAYLIST_REF_TYPE_FRANCHISE = 2;
    PLAYLIST_REF_TYPE_SERIES = 3;
}



message Classification {
    optional int64 classification_id = 1;
    MultiLingualString title = 2;
    int32 from_age = 3;
    int32 to_age = 4;
    bool public=5;
    repeated int64 default_banner_ids=6; // movie ids for default banners
}

message ClassificationList {
    optional int64 classification_list_id = 1;
    int64 classification_id = 2;
    MultiLingualString title = 3;
}

message GenreSimpleSpecification {
    optional int64 genre_simple_specification_id = 1;
    int64 classification_list_id = 2;
    int64 genre_id = 3;
    bool logic = 4;
}

message AgeGroupSimpleSpecification {
    optional int64 age_group_simple_specification_id = 1;
    int64 classification_list_id = 2;
    int64 age_group_id = 3;
    bool logic = 4;
}

message BannerSimpleSpecification {
    optional int64 banner_simple_specification_id = 1;
    int64 classification_list_id = 2;
    int64 movie_id = 3;
    bool logic = 4;
}

message FestivalSimpleSpecification {
    optional int64 festival_simple_specification_id = 1;
    int64 classification_list_id = 2;
    int64 festival_id = 3;
    bool logic = 4;
}

message FestivalEventSimpleSpecification {
    optional int64 festival_event_specification_id = 1;
    int64 classification_list_id = 2;
    int64 festival_event_id = 3;
    bool logic = 4;
}

message ScenesSimpleSpecification {
    optional int64 scenes_simple_specification_id = 1;
    int64 classification_list_id = 2;
    int64 scenes_id = 3;
    bool logic = 4;
}

message ReleaseAtSimpleSpecification {
    optional int64 release_at_simple_specification_id = 1;
    int64 classification_list_id =2;
    int64 release_at = 3;
    bool logic = 4;
}

message ReleaseRangeSimpleSpecification {
    optional int64 release_at_range_simple_specification_id = 1;
    int64 classification_list_id = 2;
    int64 release_at_from = 3;
    int64 release_at_to = 4;
    bool logic = 5;
}

message ClassificationListDetail {
    ClassificationList classification_list =1;
    repeated GenreSimpleSpecification genre_simple_specifications=2;
    repeated AgeGroupSimpleSpecification age_group_simple_specifications=3;
    repeated BannerSimpleSpecification banner_simple_specifications=4;
    repeated FestivalSimpleSpecification festival_simple_specifications=5;
    repeated FestivalEventSimpleSpecification festival_event_simple_specifications=6;
    repeated ScenesSimpleSpecification scenes_simple_specifications=7;
    repeated ReleaseAtSimpleSpecification release_at_simple_specifications=8;
    repeated ReleaseRangeSimpleSpecification release_range_simple_specifications=9;
}

message ClassificationDetail {
    Classification classification=1;
    repeated ClassificationListDetail classification_list_details=2;
}

message ProfileDetails {
    string id = 1; 
    string nick_name = 2; 
    string avatar = 3;
}

message Scenes {
    optional int64 scenes_id = 1;
    common.MultiLingualString title = 2;
}
 
 message Cast {
    optional int64 cast_id = 1;
    int64 person_id = 2;
    int64 cast_type_id = 3;
    int64 movie_id = 4;
    MultiLingualString role =5;
}

message MetaContent {
    optional int64 meta_content_id = 1;
    int64 content_id   = 2;
    int64 start_time = 3;
    optional int64 end_time = 4;
    optional string  url = 5;
    common.MultiLingualString  text = 6;
    repeated int64 image_ids = 7;
    optional common.MetaContentTypes type_id = 8;
    repeated int64 movie_ids=9;
}

enum ContentState {
    CONTENT_STATE_UNKNOWN  = 0;
    CONTENT_STATE_IN_PROCESS          = 1; 
    CONTENT_STATE_PROCESSED          = 2; 
    CONTENT_STATE_FAILED          = 3; 
}