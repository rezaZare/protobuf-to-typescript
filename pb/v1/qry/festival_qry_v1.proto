syntax = "proto3";

package movie.v1.qry;

import "google/protobuf/empty.proto";
import "common/types_common_v1.proto";


option go_package = "api/pb/v1/qrypb";

service FestivalApi {
    rpc ListFestival(google.protobuf.Empty) returns (ListFestivalResponse);
    rpc GetPageOfFestival(common.OffsetPaginationRequest) returns (GetPageOfFestivalResponse);
    rpc SearchPageOfFestival(common.QueryOffsetPaginationRequest) returns (SearchPageOfFestivalResponse);
    rpc GetFestival(GetFestivalRequest) returns (GetFestivalResponse);


    // FestivalEvent
    rpc ListFestivalEvent(ListFestivalEventRequest) returns (ListFestivalEventResponse);
    rpc GetFestivalEvent(GetFestivalEventRequest) returns (GetFestivalEventResponse);

    // FestivalEvent participation
    rpc ListFestivalEventParticipation(ListFestivalEventParticipationRequest) returns (ListFestivalEventParticipationResponse);

    // Awards
    rpc ListFestivalEventAwards(ListFestivalEventAwardsRequest) returns( ListFestivalEventAwardsResponse);
    rpc GetMovieFestivalEventAward(GetMovieFestivalEventAwardRequest) returns(GetMovieFestivalEventAwardResponse);
    rpc GetCastFestivalEventAward(GetCastFestivalEventAwardRequest) returns(GetCastFestivalEventAwardResponse);


    rpc ListAwardStates(ListAwardStatesRequest) returns( ListAwardStatesResponse);
    // Get movie award states by movie id or optionally festival id. it will return all festival participation with award details
    rpc GetAwardStates(GetAwardStatesRequest) returns( GetAwardStatesResponse);

    rpc GetFestivalEventParticipation(GetFestivalEventParticipationRequest) returns (GetFestivalEventParticipationResponse);
}


message GetFestivalEventParticipationRequest {
    int64 festival_event_id=1;
}

message GetFestivalEventParticipationResponse {
   repeated common.FestivalEventParticipationDetail festival_event_participations=1;
   repeated common.Movie wanted_movies =2;
   map<int64, int64> participation_movie_id_map = 3;
   repeated common.Genre wanted_generes =4;
}

message GetMovieFestivalEventAwardRequest {
    int64 award_id=1;
}

message GetMovieFestivalEventAwardResponse {
      common.Award award=1;
}

message GetCastFestivalEventAwardRequest {
    int64 award_id=1;
}

message GetCastFestivalEventAwardResponse {
      common.Award award=1;
}

message GetAwardStatesRequest {
    int64 movie_id=1;
    optional int64 festival_event_id=2;
}

message GetAwardStatesResponse {
        repeated common.FestivalEventParticipationDetail festival_event_participations=1;
}

message ListAwardStatesRequest {
    int64 festival_event_participation_id=1;
}

message ListAwardStatesResponse {
  
    repeated common.MovieAwardState movie_festival_event_award_states=1;
    repeated common.CastAwardState  cast_festival_event_award_states=2;
}

message ListFestivalEventAwardsRequest {
    int64 festival_event_id=1;
}

// Note that id is not unique in both context at the same time
message ListFestivalEventAwardsResponse {

    repeated common.Award movie_festival_event_awards=1;
    repeated common.Award cast_festival_event_awards=2;
}

// FestivalEvent

message ListFestivalEventRequest {
    int64 festival_id=1;
}

message ListFestivalEventResponse {
    repeated common.FestivalEventDetail events=3;
}

message GetFestivalEventRequest {
    int64 festival_event_id=1;
}

message GetFestivalEventResponse {
    common.FestivalEventDetail event=1;
}
 
// Festival

message GetFestivalRequest{
    int64 festival_id=1;
}
message GetFestivalResponse{
      common.FestivalDetail festival=1;
}

message ListFestivalResponse {
    repeated common.FestivalDetail festivals=3;
}

message GetPageOfFestivalResponse {
    int64 total_count = 1;
    repeated common.FestivalDetail festivals=3;
}
  
message SearchPageOfFestivalResponse {
    int64 total_count = 1;
    repeated common.FestivalDetail festivals=3;
}

// FestivalEvent Participation
message ListFestivalEventParticipationRequest {
    int64 movie_id = 1;
}

message ListFestivalEventParticipationResponse {
    repeated int64 festival_event_ids=1;
}
  