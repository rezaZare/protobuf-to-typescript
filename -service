/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.auth = (function() {

    /**
     * Namespace auth.
     * @exports auth
     * @namespace
     */
    var auth = {};

    auth.v1 = (function() {

        /**
         * Namespace v1.
         * @memberof auth
         * @namespace
         */
        var v1 = {};

        v1.UserService = (function() {

            /**
             * Constructs a new UserService service.
             * @memberof auth.v1
             * @classdesc Represents a UserService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function UserService(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (UserService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = UserService;

            /**
             * Creates new UserService service using the specified rpc implementation.
             * @function create
             * @memberof auth.v1.UserService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {UserService} RPC service. Useful where requests and/or responses are streamed.
             */
            UserService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link auth.v1.UserService#pickProfile}.
             * @memberof auth.v1.UserService
             * @typedef PickProfileCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {auth.v1.PickProfileResponse} [response] PickProfileResponse
             */

            /**
             * Calls PickProfile.
             * @function pickProfile
             * @memberof auth.v1.UserService
             * @instance
             * @param {auth.v1.IPickProfileRequest} request PickProfileRequest message or plain object
             * @param {auth.v1.UserService.PickProfileCallback} callback Node-style callback called with the error, if any, and PickProfileResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(UserService.prototype.pickProfile = function pickProfile(request, callback) {
                return this.rpcCall(pickProfile, $root.auth.v1.PickProfileRequest, $root.auth.v1.PickProfileResponse, request, callback);
            }, "name", { value: "PickProfile" });

            /**
             * Calls PickProfile.
             * @function pickProfile
             * @memberof auth.v1.UserService
             * @instance
             * @param {auth.v1.IPickProfileRequest} request PickProfileRequest message or plain object
             * @returns {Promise<auth.v1.PickProfileResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link auth.v1.UserService#changePassword}.
             * @memberof auth.v1.UserService
             * @typedef ChangePasswordCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {auth.v1.ChangePasswordResponse} [response] ChangePasswordResponse
             */

            /**
             * Calls ChangePassword.
             * @function changePassword
             * @memberof auth.v1.UserService
             * @instance
             * @param {auth.v1.IChangePasswordRequest} request ChangePasswordRequest message or plain object
             * @param {auth.v1.UserService.ChangePasswordCallback} callback Node-style callback called with the error, if any, and ChangePasswordResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(UserService.prototype.changePassword = function changePassword(request, callback) {
                return this.rpcCall(changePassword, $root.auth.v1.ChangePasswordRequest, $root.auth.v1.ChangePasswordResponse, request, callback);
            }, "name", { value: "ChangePassword" });

            /**
             * Calls ChangePassword.
             * @function changePassword
             * @memberof auth.v1.UserService
             * @instance
             * @param {auth.v1.IChangePasswordRequest} request ChangePasswordRequest message or plain object
             * @returns {Promise<auth.v1.ChangePasswordResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link auth.v1.UserService#getUserByToken}.
             * @memberof auth.v1.UserService
             * @typedef GetUserByTokenCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {auth.v1.GetUserByTokenResponse} [response] GetUserByTokenResponse
             */

            /**
             * Calls GetUserByToken.
             * @function getUserByToken
             * @memberof auth.v1.UserService
             * @instance
             * @param {auth.v1.IGetUserByTokenRequest} request GetUserByTokenRequest message or plain object
             * @param {auth.v1.UserService.GetUserByTokenCallback} callback Node-style callback called with the error, if any, and GetUserByTokenResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(UserService.prototype.getUserByToken = function getUserByToken(request, callback) {
                return this.rpcCall(getUserByToken, $root.auth.v1.GetUserByTokenRequest, $root.auth.v1.GetUserByTokenResponse, request, callback);
            }, "name", { value: "GetUserByToken" });

            /**
             * Calls GetUserByToken.
             * @function getUserByToken
             * @memberof auth.v1.UserService
             * @instance
             * @param {auth.v1.IGetUserByTokenRequest} request GetUserByTokenRequest message or plain object
             * @returns {Promise<auth.v1.GetUserByTokenResponse>} Promise
             * @variation 2
             */

            return UserService;
        })();

        v1.PickProfileRequest = (function() {

            /**
             * Properties of a PickProfileRequest.
             * @memberof auth.v1
             * @interface IPickProfileRequest
             * @property {string|null} [profileId] PickProfileRequest profileId
             * @property {string|null} [profilePin] PickProfileRequest profilePin
             */

            /**
             * Constructs a new PickProfileRequest.
             * @memberof auth.v1
             * @classdesc Represents a PickProfileRequest.
             * @implements IPickProfileRequest
             * @constructor
             * @param {auth.v1.IPickProfileRequest=} [properties] Properties to set
             */
            function PickProfileRequest(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PickProfileRequest profileId.
             * @member {string} profileId
             * @memberof auth.v1.PickProfileRequest
             * @instance
             */
            PickProfileRequest.prototype.profileId = "";

            /**
             * PickProfileRequest profilePin.
             * @member {string|null|undefined} profilePin
             * @memberof auth.v1.PickProfileRequest
             * @instance
             */
            PickProfileRequest.prototype.profilePin = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * PickProfileRequest _profilePin.
             * @member {"profilePin"|undefined} _profilePin
             * @memberof auth.v1.PickProfileRequest
             * @instance
             */
            Object.defineProperty(PickProfileRequest.prototype, "_profilePin", {
                get: $util.oneOfGetter($oneOfFields = ["profilePin"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new PickProfileRequest instance using the specified properties.
             * @function create
             * @memberof auth.v1.PickProfileRequest
             * @static
             * @param {auth.v1.IPickProfileRequest=} [properties] Properties to set
             * @returns {auth.v1.PickProfileRequest} PickProfileRequest instance
             */
            PickProfileRequest.create = function create(properties) {
                return new PickProfileRequest(properties);
            };

            /**
             * Encodes the specified PickProfileRequest message. Does not implicitly {@link auth.v1.PickProfileRequest.verify|verify} messages.
             * @function encode
             * @memberof auth.v1.PickProfileRequest
             * @static
             * @param {auth.v1.IPickProfileRequest} message PickProfileRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PickProfileRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.profileId != null && Object.hasOwnProperty.call(message, "profileId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.profileId);
                if (message.profilePin != null && Object.hasOwnProperty.call(message, "profilePin"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.profilePin);
                return writer;
            };

            /**
             * Encodes the specified PickProfileRequest message, length delimited. Does not implicitly {@link auth.v1.PickProfileRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof auth.v1.PickProfileRequest
             * @static
             * @param {auth.v1.IPickProfileRequest} message PickProfileRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PickProfileRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PickProfileRequest message from the specified reader or buffer.
             * @function decode
             * @memberof auth.v1.PickProfileRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {auth.v1.PickProfileRequest} PickProfileRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PickProfileRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.auth.v1.PickProfileRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.profileId = reader.string();
                            break;
                        }
                    case 2: {
                            message.profilePin = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PickProfileRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof auth.v1.PickProfileRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {auth.v1.PickProfileRequest} PickProfileRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PickProfileRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PickProfileRequest message.
             * @function verify
             * @memberof auth.v1.PickProfileRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PickProfileRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.profileId != null && message.hasOwnProperty("profileId"))
                    if (!$util.isString(message.profileId))
                        return "profileId: string expected";
                if (message.profilePin != null && message.hasOwnProperty("profilePin")) {
                    properties._profilePin = 1;
                    if (!$util.isString(message.profilePin))
                        return "profilePin: string expected";
                }
                return null;
            };

            /**
             * Creates a PickProfileRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof auth.v1.PickProfileRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {auth.v1.PickProfileRequest} PickProfileRequest
             */
            PickProfileRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.auth.v1.PickProfileRequest)
                    return object;
                var message = new $root.auth.v1.PickProfileRequest();
                if (object.profileId != null)
                    message.profileId = String(object.profileId);
                if (object.profilePin != null)
                    message.profilePin = String(object.profilePin);
                return message;
            };

            /**
             * Creates a plain object from a PickProfileRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof auth.v1.PickProfileRequest
             * @static
             * @param {auth.v1.PickProfileRequest} message PickProfileRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PickProfileRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.profileId = "";
                if (message.profileId != null && message.hasOwnProperty("profileId"))
                    object.profileId = message.profileId;
                if (message.profilePin != null && message.hasOwnProperty("profilePin")) {
                    object.profilePin = message.profilePin;
                    if (options.oneofs)
                        object._profilePin = "profilePin";
                }
                return object;
            };

            /**
             * Converts this PickProfileRequest to JSON.
             * @function toJSON
             * @memberof auth.v1.PickProfileRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PickProfileRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PickProfileRequest
             * @function getTypeUrl
             * @memberof auth.v1.PickProfileRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PickProfileRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/auth.v1.PickProfileRequest";
            };

            return PickProfileRequest;
        })();

        v1.PickProfileResponse = (function() {

            /**
             * Properties of a PickProfileResponse.
             * @memberof auth.v1
             * @interface IPickProfileResponse
             * @property {string|null} [sessionToken] PickProfileResponse sessionToken
             */

            /**
             * Constructs a new PickProfileResponse.
             * @memberof auth.v1
             * @classdesc Represents a PickProfileResponse.
             * @implements IPickProfileResponse
             * @constructor
             * @param {auth.v1.IPickProfileResponse=} [properties] Properties to set
             */
            function PickProfileResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PickProfileResponse sessionToken.
             * @member {string} sessionToken
             * @memberof auth.v1.PickProfileResponse
             * @instance
             */
            PickProfileResponse.prototype.sessionToken = "";

            /**
             * Creates a new PickProfileResponse instance using the specified properties.
             * @function create
             * @memberof auth.v1.PickProfileResponse
             * @static
             * @param {auth.v1.IPickProfileResponse=} [properties] Properties to set
             * @returns {auth.v1.PickProfileResponse} PickProfileResponse instance
             */
            PickProfileResponse.create = function create(properties) {
                return new PickProfileResponse(properties);
            };

            /**
             * Encodes the specified PickProfileResponse message. Does not implicitly {@link auth.v1.PickProfileResponse.verify|verify} messages.
             * @function encode
             * @memberof auth.v1.PickProfileResponse
             * @static
             * @param {auth.v1.IPickProfileResponse} message PickProfileResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PickProfileResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sessionToken != null && Object.hasOwnProperty.call(message, "sessionToken"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.sessionToken);
                return writer;
            };

            /**
             * Encodes the specified PickProfileResponse message, length delimited. Does not implicitly {@link auth.v1.PickProfileResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof auth.v1.PickProfileResponse
             * @static
             * @param {auth.v1.IPickProfileResponse} message PickProfileResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PickProfileResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PickProfileResponse message from the specified reader or buffer.
             * @function decode
             * @memberof auth.v1.PickProfileResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {auth.v1.PickProfileResponse} PickProfileResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PickProfileResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.auth.v1.PickProfileResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.sessionToken = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PickProfileResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof auth.v1.PickProfileResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {auth.v1.PickProfileResponse} PickProfileResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PickProfileResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PickProfileResponse message.
             * @function verify
             * @memberof auth.v1.PickProfileResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PickProfileResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sessionToken != null && message.hasOwnProperty("sessionToken"))
                    if (!$util.isString(message.sessionToken))
                        return "sessionToken: string expected";
                return null;
            };

            /**
             * Creates a PickProfileResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof auth.v1.PickProfileResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {auth.v1.PickProfileResponse} PickProfileResponse
             */
            PickProfileResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.auth.v1.PickProfileResponse)
                    return object;
                var message = new $root.auth.v1.PickProfileResponse();
                if (object.sessionToken != null)
                    message.sessionToken = String(object.sessionToken);
                return message;
            };

            /**
             * Creates a plain object from a PickProfileResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof auth.v1.PickProfileResponse
             * @static
             * @param {auth.v1.PickProfileResponse} message PickProfileResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PickProfileResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.sessionToken = "";
                if (message.sessionToken != null && message.hasOwnProperty("sessionToken"))
                    object.sessionToken = message.sessionToken;
                return object;
            };

            /**
             * Converts this PickProfileResponse to JSON.
             * @function toJSON
             * @memberof auth.v1.PickProfileResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PickProfileResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PickProfileResponse
             * @function getTypeUrl
             * @memberof auth.v1.PickProfileResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PickProfileResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/auth.v1.PickProfileResponse";
            };

            return PickProfileResponse;
        })();

        v1.ChangePasswordRequest = (function() {

            /**
             * Properties of a ChangePasswordRequest.
             * @memberof auth.v1
             * @interface IChangePasswordRequest
             * @property {string|null} [oldPassword] ChangePasswordRequest oldPassword
             * @property {string|null} [newPassword] ChangePasswordRequest newPassword
             */

            /**
             * Constructs a new ChangePasswordRequest.
             * @memberof auth.v1
             * @classdesc Represents a ChangePasswordRequest.
             * @implements IChangePasswordRequest
             * @constructor
             * @param {auth.v1.IChangePasswordRequest=} [properties] Properties to set
             */
            function ChangePasswordRequest(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ChangePasswordRequest oldPassword.
             * @member {string} oldPassword
             * @memberof auth.v1.ChangePasswordRequest
             * @instance
             */
            ChangePasswordRequest.prototype.oldPassword = "";

            /**
             * ChangePasswordRequest newPassword.
             * @member {string} newPassword
             * @memberof auth.v1.ChangePasswordRequest
             * @instance
             */
            ChangePasswordRequest.prototype.newPassword = "";

            /**
             * Creates a new ChangePasswordRequest instance using the specified properties.
             * @function create
             * @memberof auth.v1.ChangePasswordRequest
             * @static
             * @param {auth.v1.IChangePasswordRequest=} [properties] Properties to set
             * @returns {auth.v1.ChangePasswordRequest} ChangePasswordRequest instance
             */
            ChangePasswordRequest.create = function create(properties) {
                return new ChangePasswordRequest(properties);
            };

            /**
             * Encodes the specified ChangePasswordRequest message. Does not implicitly {@link auth.v1.ChangePasswordRequest.verify|verify} messages.
             * @function encode
             * @memberof auth.v1.ChangePasswordRequest
             * @static
             * @param {auth.v1.IChangePasswordRequest} message ChangePasswordRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChangePasswordRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.oldPassword != null && Object.hasOwnProperty.call(message, "oldPassword"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.oldPassword);
                if (message.newPassword != null && Object.hasOwnProperty.call(message, "newPassword"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.newPassword);
                return writer;
            };

            /**
             * Encodes the specified ChangePasswordRequest message, length delimited. Does not implicitly {@link auth.v1.ChangePasswordRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof auth.v1.ChangePasswordRequest
             * @static
             * @param {auth.v1.IChangePasswordRequest} message ChangePasswordRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChangePasswordRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ChangePasswordRequest message from the specified reader or buffer.
             * @function decode
             * @memberof auth.v1.ChangePasswordRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {auth.v1.ChangePasswordRequest} ChangePasswordRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChangePasswordRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.auth.v1.ChangePasswordRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.oldPassword = reader.string();
                            break;
                        }
                    case 2: {
                            message.newPassword = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ChangePasswordRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof auth.v1.ChangePasswordRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {auth.v1.ChangePasswordRequest} ChangePasswordRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChangePasswordRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ChangePasswordRequest message.
             * @function verify
             * @memberof auth.v1.ChangePasswordRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ChangePasswordRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.oldPassword != null && message.hasOwnProperty("oldPassword"))
                    if (!$util.isString(message.oldPassword))
                        return "oldPassword: string expected";
                if (message.newPassword != null && message.hasOwnProperty("newPassword"))
                    if (!$util.isString(message.newPassword))
                        return "newPassword: string expected";
                return null;
            };

            /**
             * Creates a ChangePasswordRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof auth.v1.ChangePasswordRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {auth.v1.ChangePasswordRequest} ChangePasswordRequest
             */
            ChangePasswordRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.auth.v1.ChangePasswordRequest)
                    return object;
                var message = new $root.auth.v1.ChangePasswordRequest();
                if (object.oldPassword != null)
                    message.oldPassword = String(object.oldPassword);
                if (object.newPassword != null)
                    message.newPassword = String(object.newPassword);
                return message;
            };

            /**
             * Creates a plain object from a ChangePasswordRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof auth.v1.ChangePasswordRequest
             * @static
             * @param {auth.v1.ChangePasswordRequest} message ChangePasswordRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ChangePasswordRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.oldPassword = "";
                    object.newPassword = "";
                }
                if (message.oldPassword != null && message.hasOwnProperty("oldPassword"))
                    object.oldPassword = message.oldPassword;
                if (message.newPassword != null && message.hasOwnProperty("newPassword"))
                    object.newPassword = message.newPassword;
                return object;
            };

            /**
             * Converts this ChangePasswordRequest to JSON.
             * @function toJSON
             * @memberof auth.v1.ChangePasswordRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ChangePasswordRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ChangePasswordRequest
             * @function getTypeUrl
             * @memberof auth.v1.ChangePasswordRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ChangePasswordRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/auth.v1.ChangePasswordRequest";
            };

            return ChangePasswordRequest;
        })();

        v1.ChangePasswordResponse = (function() {

            /**
             * Properties of a ChangePasswordResponse.
             * @memberof auth.v1
             * @interface IChangePasswordResponse
             */

            /**
             * Constructs a new ChangePasswordResponse.
             * @memberof auth.v1
             * @classdesc Represents a ChangePasswordResponse.
             * @implements IChangePasswordResponse
             * @constructor
             * @param {auth.v1.IChangePasswordResponse=} [properties] Properties to set
             */
            function ChangePasswordResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new ChangePasswordResponse instance using the specified properties.
             * @function create
             * @memberof auth.v1.ChangePasswordResponse
             * @static
             * @param {auth.v1.IChangePasswordResponse=} [properties] Properties to set
             * @returns {auth.v1.ChangePasswordResponse} ChangePasswordResponse instance
             */
            ChangePasswordResponse.create = function create(properties) {
                return new ChangePasswordResponse(properties);
            };

            /**
             * Encodes the specified ChangePasswordResponse message. Does not implicitly {@link auth.v1.ChangePasswordResponse.verify|verify} messages.
             * @function encode
             * @memberof auth.v1.ChangePasswordResponse
             * @static
             * @param {auth.v1.IChangePasswordResponse} message ChangePasswordResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChangePasswordResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified ChangePasswordResponse message, length delimited. Does not implicitly {@link auth.v1.ChangePasswordResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof auth.v1.ChangePasswordResponse
             * @static
             * @param {auth.v1.IChangePasswordResponse} message ChangePasswordResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChangePasswordResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ChangePasswordResponse message from the specified reader or buffer.
             * @function decode
             * @memberof auth.v1.ChangePasswordResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {auth.v1.ChangePasswordResponse} ChangePasswordResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChangePasswordResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.auth.v1.ChangePasswordResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ChangePasswordResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof auth.v1.ChangePasswordResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {auth.v1.ChangePasswordResponse} ChangePasswordResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChangePasswordResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ChangePasswordResponse message.
             * @function verify
             * @memberof auth.v1.ChangePasswordResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ChangePasswordResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a ChangePasswordResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof auth.v1.ChangePasswordResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {auth.v1.ChangePasswordResponse} ChangePasswordResponse
             */
            ChangePasswordResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.auth.v1.ChangePasswordResponse)
                    return object;
                return new $root.auth.v1.ChangePasswordResponse();
            };

            /**
             * Creates a plain object from a ChangePasswordResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof auth.v1.ChangePasswordResponse
             * @static
             * @param {auth.v1.ChangePasswordResponse} message ChangePasswordResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ChangePasswordResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this ChangePasswordResponse to JSON.
             * @function toJSON
             * @memberof auth.v1.ChangePasswordResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ChangePasswordResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ChangePasswordResponse
             * @function getTypeUrl
             * @memberof auth.v1.ChangePasswordResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ChangePasswordResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/auth.v1.ChangePasswordResponse";
            };

            return ChangePasswordResponse;
        })();

        v1.GetUserByTokenRequest = (function() {

            /**
             * Properties of a GetUserByTokenRequest.
             * @memberof auth.v1
             * @interface IGetUserByTokenRequest
             */

            /**
             * Constructs a new GetUserByTokenRequest.
             * @memberof auth.v1
             * @classdesc Represents a GetUserByTokenRequest.
             * @implements IGetUserByTokenRequest
             * @constructor
             * @param {auth.v1.IGetUserByTokenRequest=} [properties] Properties to set
             */
            function GetUserByTokenRequest(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new GetUserByTokenRequest instance using the specified properties.
             * @function create
             * @memberof auth.v1.GetUserByTokenRequest
             * @static
             * @param {auth.v1.IGetUserByTokenRequest=} [properties] Properties to set
             * @returns {auth.v1.GetUserByTokenRequest} GetUserByTokenRequest instance
             */
            GetUserByTokenRequest.create = function create(properties) {
                return new GetUserByTokenRequest(properties);
            };

            /**
             * Encodes the specified GetUserByTokenRequest message. Does not implicitly {@link auth.v1.GetUserByTokenRequest.verify|verify} messages.
             * @function encode
             * @memberof auth.v1.GetUserByTokenRequest
             * @static
             * @param {auth.v1.IGetUserByTokenRequest} message GetUserByTokenRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetUserByTokenRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified GetUserByTokenRequest message, length delimited. Does not implicitly {@link auth.v1.GetUserByTokenRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof auth.v1.GetUserByTokenRequest
             * @static
             * @param {auth.v1.IGetUserByTokenRequest} message GetUserByTokenRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetUserByTokenRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetUserByTokenRequest message from the specified reader or buffer.
             * @function decode
             * @memberof auth.v1.GetUserByTokenRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {auth.v1.GetUserByTokenRequest} GetUserByTokenRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetUserByTokenRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.auth.v1.GetUserByTokenRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetUserByTokenRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof auth.v1.GetUserByTokenRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {auth.v1.GetUserByTokenRequest} GetUserByTokenRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetUserByTokenRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetUserByTokenRequest message.
             * @function verify
             * @memberof auth.v1.GetUserByTokenRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetUserByTokenRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a GetUserByTokenRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof auth.v1.GetUserByTokenRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {auth.v1.GetUserByTokenRequest} GetUserByTokenRequest
             */
            GetUserByTokenRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.auth.v1.GetUserByTokenRequest)
                    return object;
                return new $root.auth.v1.GetUserByTokenRequest();
            };

            /**
             * Creates a plain object from a GetUserByTokenRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof auth.v1.GetUserByTokenRequest
             * @static
             * @param {auth.v1.GetUserByTokenRequest} message GetUserByTokenRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetUserByTokenRequest.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this GetUserByTokenRequest to JSON.
             * @function toJSON
             * @memberof auth.v1.GetUserByTokenRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetUserByTokenRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GetUserByTokenRequest
             * @function getTypeUrl
             * @memberof auth.v1.GetUserByTokenRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GetUserByTokenRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/auth.v1.GetUserByTokenRequest";
            };

            return GetUserByTokenRequest;
        })();

        v1.GetUserByTokenResponse = (function() {

            /**
             * Properties of a GetUserByTokenResponse.
             * @memberof auth.v1
             * @interface IGetUserByTokenResponse
             * @property {string|null} [name] GetUserByTokenResponse name
             * @property {string|null} [family] GetUserByTokenResponse family
             */

            /**
             * Constructs a new GetUserByTokenResponse.
             * @memberof auth.v1
             * @classdesc Represents a GetUserByTokenResponse.
             * @implements IGetUserByTokenResponse
             * @constructor
             * @param {auth.v1.IGetUserByTokenResponse=} [properties] Properties to set
             */
            function GetUserByTokenResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetUserByTokenResponse name.
             * @member {string} name
             * @memberof auth.v1.GetUserByTokenResponse
             * @instance
             */
            GetUserByTokenResponse.prototype.name = "";

            /**
             * GetUserByTokenResponse family.
             * @member {string} family
             * @memberof auth.v1.GetUserByTokenResponse
             * @instance
             */
            GetUserByTokenResponse.prototype.family = "";

            /**
             * Creates a new GetUserByTokenResponse instance using the specified properties.
             * @function create
             * @memberof auth.v1.GetUserByTokenResponse
             * @static
             * @param {auth.v1.IGetUserByTokenResponse=} [properties] Properties to set
             * @returns {auth.v1.GetUserByTokenResponse} GetUserByTokenResponse instance
             */
            GetUserByTokenResponse.create = function create(properties) {
                return new GetUserByTokenResponse(properties);
            };

            /**
             * Encodes the specified GetUserByTokenResponse message. Does not implicitly {@link auth.v1.GetUserByTokenResponse.verify|verify} messages.
             * @function encode
             * @memberof auth.v1.GetUserByTokenResponse
             * @static
             * @param {auth.v1.IGetUserByTokenResponse} message GetUserByTokenResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetUserByTokenResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.family != null && Object.hasOwnProperty.call(message, "family"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.family);
                return writer;
            };

            /**
             * Encodes the specified GetUserByTokenResponse message, length delimited. Does not implicitly {@link auth.v1.GetUserByTokenResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof auth.v1.GetUserByTokenResponse
             * @static
             * @param {auth.v1.IGetUserByTokenResponse} message GetUserByTokenResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetUserByTokenResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetUserByTokenResponse message from the specified reader or buffer.
             * @function decode
             * @memberof auth.v1.GetUserByTokenResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {auth.v1.GetUserByTokenResponse} GetUserByTokenResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetUserByTokenResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.auth.v1.GetUserByTokenResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message.family = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetUserByTokenResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof auth.v1.GetUserByTokenResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {auth.v1.GetUserByTokenResponse} GetUserByTokenResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetUserByTokenResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetUserByTokenResponse message.
             * @function verify
             * @memberof auth.v1.GetUserByTokenResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetUserByTokenResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.family != null && message.hasOwnProperty("family"))
                    if (!$util.isString(message.family))
                        return "family: string expected";
                return null;
            };

            /**
             * Creates a GetUserByTokenResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof auth.v1.GetUserByTokenResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {auth.v1.GetUserByTokenResponse} GetUserByTokenResponse
             */
            GetUserByTokenResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.auth.v1.GetUserByTokenResponse)
                    return object;
                var message = new $root.auth.v1.GetUserByTokenResponse();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.family != null)
                    message.family = String(object.family);
                return message;
            };

            /**
             * Creates a plain object from a GetUserByTokenResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof auth.v1.GetUserByTokenResponse
             * @static
             * @param {auth.v1.GetUserByTokenResponse} message GetUserByTokenResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetUserByTokenResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.family = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.family != null && message.hasOwnProperty("family"))
                    object.family = message.family;
                return object;
            };

            /**
             * Converts this GetUserByTokenResponse to JSON.
             * @function toJSON
             * @memberof auth.v1.GetUserByTokenResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetUserByTokenResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GetUserByTokenResponse
             * @function getTypeUrl
             * @memberof auth.v1.GetUserByTokenResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GetUserByTokenResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/auth.v1.GetUserByTokenResponse";
            };

            return GetUserByTokenResponse;
        })();

        return v1;
    })();

    return auth;
})();

module.exports = $root;
